#include <iostream>
#include <conio.h>//header file for the interaction with the keyboard
#include <windows.h>//sleep
#include <ctime> //time
#include <vector>
using namespace std;

class Snake
{
public:
	const int width = 30;//dimension of the map
	const int height = 20;
	int xc; //x corrdinate
	int yc; //y corrdinate
	int foodx;//location of food at x corrdinate
	int foody;//location of food at y corrdinate

	//enum is needed because direction is the key for the movement
	enum directons { STOP = 0, LEFT, RIGHT, UP, DOWN };//lower case letter sofr left and right will show ambiguous error, why?
	directons direction;
	bool gameover;

	int score = 0;//initial score 
	int numberoftail = 0;//no tail in the begining

	//to store the tails
	int vx[100];
	int vy[100];

	void setup();
	void draw();
	void input();
	void motion();
};
void Snake::setup()
{
	//game cant be false in the begining
	gameover = false;
	direction = STOP;
	xc = width / 2;	//innitial location of the snake head, moving xc and yc will change the locationof the snake, so, snake is just being replaced, not moving
	yc = height / 2;
	srand(time(0));//with this, food will be place ramdonly in different location each time the game runs
	foodx =1+ rand() % width;	//food will located in different place each time a new game begins
	foody = 1+rand() % height;//!=30 and 20, 0to29 and 0 to 19 with 1= food is 1to3033
}
void Snake::draw()
{
	system("cls");//so, new maps are draw at the same space when snake moves
	
	//draw the upper wall of the interface
	for (int i = 0; i < width + 2; i++) cout << "@"; cout << endl;

	//draw the left and right wall, food, and snake location
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width + 2; j++)
		{
			if (j == 0 || j == width + 1) cout << "@";//left and right wall
			else if (i == yc && j == xc) cout << "Q";//place the snake head
			else if (i == foody && j == foodx) cout << "F";//place the food the 0 of j and the 0 of food x is different 0to31 for j and 1to30 for foodx here
			else 
			{   
				//display the new grow tails
				bool print=false;//must place here or the interface will mess up
				for (int k = 0; k < numberoftail; k++)
				{
					if (vx[k] == j && vy[k] == i)
					{
						cout << "o";
						print = true;
					}
				}
				if (!print)
					cout << " ";//without this else here, the right wall will move when the snake moves
			}
		}
		cout << endl;
	}
	
	//draw the buttom wall
	for (int i = 0; i < width + 2; i++) cout << "@"; cout << endl;
	
	//out put the scores
	cout << " Your score is " << score << endl;
}

void Snake::input()
{
	if (_kbhit())
	{
		switch (_getch())
		{
		case 'a':
			direction = LEFT;
			break;
		case 'd':
			direction = RIGHT;
			break;
		case 'w':
			direction = UP;
			break;
		case 's':
			direction = DOWN;
			break;
		case 'x':
			gameover = true;
			break;
		}
	}
}
void Snake::motion()
{
	//eat food and grow tail
	int prevX = vx[0];
	int prevY = vy[0];
	int previousX, previousY;
	vx[0] = xc;
	vy[0] = yc;
	for (int i = 1; i < numberoftail; i++)
	{
		previousX = vx[i];
		previousY = vy[i];
		vx[i] = prevX;
		vy[i] = prevY;
		prevX = previousX;
		prevY = previousY;
	}

	switch (direction)
	{
	case LEFT:
		xc--;
		break;
	case RIGHT:
		xc++;
		break;
	case UP:
		yc--;
		break;
	case DOWN:
		yc++;
		break;
	default:
		break;
	}
	
	//if the snake hit the wall,the game ends
	if (xc <=0 || yc < 0 || xc > width || yc >= height) gameover = true;

	//eat the food, socre 10, food then ransomly occur somewhere, cout the score
	if (xc == foodx && yc == foody)
	{
		numberoftail++;//also frow a tail
		score += 10;//+10 points after eating food
		//after eating a food, another occur randomly
		srand(time(0));
		foodx = rand() % width;	//food will located in different place each time a new game begins
		foody = rand() % height;
	}

	//game terminate if snake eats itself
	for (int i = 0; i < numberoftail; i++)
		if (vx[i] == xc && vy[i] == yc)
			gameover = true;

	
}

int main()
{
	Snake snakeobject;
	snakeobject.setup();
	while (!snakeobject.gameover)
	{
		snakeobject.draw();
		snakeobject.input();
		snakeobject.motion();
		Sleep(50);//speed of clearing the screen
	}
	system("Pause");
}
